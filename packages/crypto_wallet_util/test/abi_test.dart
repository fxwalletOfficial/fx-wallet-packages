import 'package:test/test.dart';

import 'package:crypto_wallet_util/crypto_utils.dart';

void main() {
  final expectedFunctionName = 'swapExactAmountIn';
  final expectedFunctionSignature =
      'swapExactAmountIn(address,(address,address,uint256,uint256,uint256,bytes32,address),uint256,bytes,bytes)';

  const exampleData =
      '0xe3ead59e00000000000000000000000000c600b30fb0400701010f4b080409018b9006e0000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000c1cba3fcea344f92d9239c08c0568f6f2f0ee452000000000000000000000000000000000000000000000000017e7c331884c000000000000000000000000000000000000000000000000000013b9230a19971d5000000000000000000000000000000000000000000000000013d2826958c10a3956759cbb6c74411b8481488f0cf2d6a00000000000000000000000001fe461d0000000000000000000000000000000000000000000000000000000000000000de219fe970acbc88c63c9c4d0705837c6701495f90000000000000000000000000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000007e0000000000000000000000000000007800000000000000000000000000000271042000000000000000000000000000000000000060000002000040000ff00000900000000000000000000000000000000000000000000000000000000d0e30db000000000000000000000000000000000000000000000072006c40624000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000006c0000000000000000000000000000001c0000000000000000000000000000020d042000000000000000000000000000000000000060000006000240000ff00000300000000000000000000000000000000000000000000000000000000a9059cbb000000000000000000000000744d441ed6a00d59ea1e3fdbad2b10d9a869c92f0000000000000000000000000000000000000000000000000141499b8f79c000744d441ed6a00d59ea1e3fdbad2b10d9a869c92f000001200024000020000003000000000000000000000000000000000000000000000000000000003eece7db0000000000000000000000006a000f20005980200259b80c51020030400010680000000000000000000000000000000000000000000000000141499b8f79c00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040c00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000006000000000000000000000000000004c000000000000001200000000000000640aee2b8d4a154e36f479daece3fb3e6c3c03d396e00000140008400ef0000000b00000000000000000000000000000000000000000000000000000000c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000c600b30fb0400701010f4b080409018b9006e0000000000000000000000000000000000000000000000000000000006890239e000000000000000000000000000000000000000000000000003d3297890b00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002b42000000000000000000000000000000000000060001f42416092f143378750bb29b79ed961ab195cceea500000000000000000000000000000000000000000085a80afee867adf27b50bdb7b76da70f1e853062000002c001040244ff00000b00000000000000000000000000000000000000000000000000000000286f580d0000000000000000000000000000000000000000000000000000000000000080ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000002416092f143378750bb29b79ed961ab195cceea50000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000003a47db6cf8ebde00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000f8f10f39116716e89498c1c5e94137ada11b2bc7000000000000000000000000f8f10f39116716e89498c1c5e94137ada11b2bc70000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b5bfb5adb736ea852bd58fec71db3b356c2a39380000000000000000000000000830820d1a9aa1554364752d6d8f55c836871b7400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000830820d1a9aa1554364752d6d8f55c836871b74000000000000000000000000c1cba3fcea344f92d9239c08c0568f6f2f0ee45200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000c1cba3fcea344f92d9239c08c0568f6f2f0ee4520000006000240000ff00000300000000000000000000000000000000000000000000000000000000a9059cbb0000000000000000000000006a000f20005980200259b80c51020030400010680000000000000000000000000000000000000000000000000032c0b9bc01ac66';

  group('ABI Decoder', () {
    test('should get function name and signature', () {
      final functionName = EthDataDecoder.paraSwap.getFunctionName(exampleData);
      expect(functionName, expectedFunctionName);

      final functionSignature =
          EthDataDecoder.paraSwap.getFunctionSignature(exampleData);
      expect(functionSignature, expectedFunctionSignature);

      final functions = EthDataDecoder.paraSwap.functions;
      final signature = EthDataDecoder.paraSwap.signatures;
      expect(functions, isNotEmpty);
      expect(signature, isNotEmpty);
      assert(EthDataDecoder.paraSwap.hasFunction(exampleData.substring(0, 10)));
      final selector = AbiDecoder.compute4BytesSignature(functionSignature!);
      expect(selector, exampleData.substring(0, 10));
    });

    test('should decode function parameters', () {
      // Expected values map for validation
      final expectedValues = {
        'executor': '0x00c600b30fb0400701010f4b080409018b9006e0',
        'swapData': {
          'srcToken': '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
          'destToken': '0xc1cba3fcea344f92d9239c08c0568f6f2f0ee452',
          'fromAmount': BigInt.parse('107660000000000000'),
          'toAmount': BigInt.parse('88825355231130069'),
          'quotedAmount': BigInt.parse('89271713800130723'),
          'metadata':
              '0x956759cbb6c74411b8481488f0cf2d6a00000000000000000000000001fe461d',
          'beneficiary': '0x0000000000000000000000000000000000000000',
        },
        'partnerAndFee': BigInt.parse(
            '100472862009825574373237611346929030672192235185884784397446195511462664863744'),
        'permit': '0x',
        'executorData':
            '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000007e0000000000000000000000000000007800000000000000000000000000000271042000000000000000000000000000000000000060000002000040000ff00000900000000000000000000000000000000000000000000000000000000d0e30db000000000000000000000000000000000000000000000072006c40624000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000006c0000000000000000000000000000001c0000000000000000000000000000020d042000000000000000000000000000000000000060000006000240000ff00000300000000000000000000000000000000000000000000000000000000a9059cbb000000000000000000000000744d441ed6a00d59ea1e3fdbad2b10d9a869c92f0000000000000000000000000000000000000000000000000141499b8f79c000744d441ed6a00d59ea1e3fdbad2b10d9a869c92f000001200024000020000003000000000000000000000000000000000000000000000000000000003eece7db0000000000000000000000006a000f20005980200259b80c51020030400010680000000000000000000000000000000000000000000000000141499b8f79c00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040c00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000006000000000000000000000000000004c000000000000001200000000000000640aee2b8d4a154e36f479daece3fb3e6c3c03d396e00000140008400ef0000000b00000000000000000000000000000000000000000000000000000000c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000c600b30fb0400701010f4b080409018b9006e0000000000000000000000000000000000000000000000000000000006890239e000000000000000000000000000000000000000000000000003d3297890b00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002b42000000000000000000000000000000000000060001f42416092f143378750bb29b79ed961ab195cceea500000000000000000000000000000000000000000085a80afee867adf27b50bdb7b76da70f1e853062000002c001040244ff00000b00000000000000000000000000000000000000000000000000000000286f580d0000000000000000000000000000000000000000000000000000000000000080ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000002416092f143378750bb29b79ed961ab195cceea50000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000003a47db6cf8ebde00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000f8f10f39116716e89498c1c5e94137ada11b2bc7000000000000000000000000f8f10f39116716e89498c1c5e94137ada11b2bc70000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b5bfb5adb736ea852bd58fec71db3b356c2a39380000000000000000000000000830820d1a9aa1554364752d6d8f55c836871b7400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000830820d1a9aa1554364752d6d8f55c836871b74000000000000000000000000c1cba3fcea344f92d9239c08c0568f6f2f0ee45200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000c1cba3fcea344f92d9239c08c0568f6f2f0ee4520000006000240000ff00000300000000000000000000000000000000000000000000000000000000a9059cbb0000000000000000000000006a000f20005980200259b80c51020030400010680000000000000000000000000000000000000000000000000032c0b9bc01ac66',
      };

      final result = EthDataDecoder.paraSwap.decodeParameters(exampleData);

      expect(result, isNotNull);
      expect(result!['function'], expectedFunctionName);
      expect(result['signature'], expectedFunctionSignature);

      if (result.containsKey('error')) {
        fail('Decoding failed: ${result['error']}');
      }

      final parameters = result['parameters'] as List;
      final formattedParams = EthDataDecoder.formatParameters(parameters);

      // Verify that the formatted parameter structure matches the expected values
      expect(formattedParams, equals(expectedValues));
    });
  });

  test('should decode function parameters', () {
    const abi = [
      {
        "inputs": [
          {"internalType": "address", "name": "spender", "type": "address"},
          {"internalType": "uint256", "name": "amount", "type": "uint256"}
        ],
        "name": "approve",
        "outputs": [
          {"internalType": "bool", "name": "", "type": "bool"}
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ];
    const data =
        '0x095ea7b300000000000000000000000068d6b739d2020067d1e2f713b999da97e4d548120000000000000000000000000000000000000000000000000000000005f5e100';
    final result = EthDataDecoder.decodeByAbi(abi, data);
    expect(result['function'], "approve");
  });
}
